void atkin(ll limit , vll & primes)
{
    if (limit > 2)  primes.push_back(2);
    if (limit > 3)  primes.push_back(3);

    bool sieve[limit];
    for (ll i=0; i<limit; i++)
        sieve[i] = false;

    for (ll x = 1; x*x < limit; x++)
    {
        for (ll y = 1; y*y < limit; y++)
        {
            ll n = (4*x*x)+(y*y);
            if (n <= limit && (n % 12 == 1 || n % 12 == 5))
                sieve[n] ^= true;

            n = (3*x*x)+(y*y);
            if (n <= limit && n % 12 == 7)
                sieve[n] ^= true;

            n = (3*x*x)-(y*y);
            if (x > y && n <= limit && n % 12 == 11)
                sieve[n] ^= true;
        }
    }

    for (ll r = 5; r*r < limit; r++)
    {
        if (sieve[r])
        {
            for (ll i = r*r; i < limit; i += r*r)
                sieve[i] = false;
        }
    }
    for (ll a = 5; a < limit; a++)
        if (sieve[a])
            primes.push_back(a);
}


void primeFactors(ll n, ll m, vector<vll> & factors, vll & primes)
{
    for(ll i = 0; i < n; i++){
        ll j = 0;
        if(arr[i] == 1){
            factors[i].push_back(1);
        }
        while (arr[i] >= primes[j])
        {
            if(arr[i]%primes[j] == 0) {
                factors[i].push_back(primes[j]);
                arr[i] = arr[i] / primes[j];
            } else j++;
            if(arr[i] == 1) {
                factors[i].push_back(1);
                break;
            }
            if(factors[i].size() > m){
                break;
            }
        }
    }

}
