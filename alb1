#include <bits/stdc++.h>

using namespace std;

typedef long long int ll;
#define vec vector

int min(int i, int j){
	if(i < j){
		return 0;
		
		}
	else{
		return 1;
		}
}

int main(){
	ll t;
	cin >> t;
	
	while(t--){
		ll n, m;
		cin >> n >> m;
		
		vec <vec<ll>> arrC(n+1, vec<ll>(m+1, 0));
		//ll arrC[n+1][m+1];
		//ll arrP[n+1][m+1];
		//ll arr[n+1][m+1];
		//ll dir[n+1][m+1];
		
		vec <vec<ll>> arrP(n+1, vec<ll>(m+1, 0));
		
		vec <vec<ll>> arr(n+1, vec<ll>(m+1, 0));
		
		vec <vec<ll>> dir(n+1, vec<ll>(m+1, 0));
		for(int i = 0; i < m; i++){
			arr[0][i] = 0;
			dir[0][i] = 0;
			arrP[0][i] = 0;
			arrC[0][i] = 0; 
		}
		for(int i = 0; i< n; i++){
			arr[i][0] = 0;
			dir[i][0] = 0;
			arrP[i][0] = 0;
			arrC[i][0] = 0;
		}
		for(int i = 1; i <= n; i++){
			for(int j =1; j <= m ;j++){
				cin >> arrC[i][j]; 
			}
		}
		for(int i = 1; i <= n; i++){
			for(int j =1; j <= m ;j++){
				cin >> arrP[i][j]; 
			}
		}
		for(int i = 2; i <= n; i++){
			//for(int j =1; j <= m ;j++){
				//if(i == 1 && j ==1){
					arr[1][1] = arrC[1][1];
				//}
				//else
				//{
					arr[i][1] = arr[i-1][1] + arrC[i][1];
					dir[i][1] = 1;
				//}
				//cin >> arrP[i][j]; 
			//}
		}
		//for(int i = 1; i <= n; i++){
			for(int j =2; j <= m ;j++){
				//if arrP[i][j];
				arr[1][j] = arr[1][j-1] + arrC[1][j];
				dir[1][j] = 0; 
			}
		//}//
		//for(int i = 1; 
		
		for(int i = 2; i <= n; i++){
			for(int j = 2; j<= m; j++){
				int d = (arr[i][j-1] + arrP[i][j-1]) < (arr[i-1][j]+ arrP[i-1][j]) ? 0 : 1;
				//cout << "D : " << d << endl;
				if(d == 0 ){
				if(dir[i][j-1] == 1){
					arr[i][j] += arrP[i][j-1] + arrC[i][j] + arr[i][j-1];
					}
					else{
						arr[i][j] += arrC[i][j] + arr[i][j-1];
					}
				}
				else {
				if(dir[i-1][j] == 0){
					arr[i][j] += arrP[i-1][j] + arrC[i][j] + arr[i-1][j];
					}
					else{
						arr[i][j] += arrC[i][j] + arr[i-1][j];
					}
				}
			}
		}
		
		cout << arr[n][m] << endl;
	}
}















